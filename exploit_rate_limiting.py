import os
import time
import json
import requests
from bs4 import BeautifulSoup

# ─── Configuration ─────────────────────────────────────────────────────────────
CPR_FILE   = 'numbers_clean.txt'
OUTPUT_DIR = 'responses'

# OpenID‑Connect authorize URL (will redirect to actual login form)
LOGIN_GET = (
    'https://auth.danlon.dk/auth/realms/danlon/'
    'protocol/openid-connect/auth'
    '?response_type=code'
    '&client_id=danlon'
    '&redirect_uri=https%3A%2F%2Fapp.danlon.dk%2Fapp%2Foauth2%2FloginCallback'
    '&scope=openid+email'
    '&state=%2Fapp%2Fmedarbejder%2Fgenerelt%2FNY%3Fu%3D1752663549968'
)

# Base for POST action (the form action may be relative)
LOGIN_POST_BASE = 'https://auth.danlon.dk'

# Data endpoint
DATA_URL = 'https://app.danlon.dk/app/rest/cpropslag'

# Your credentials
USERNAME = '1234abc'
PASSWORD = 'Komma,2100'
# ────────────────────────────────────────────────────────────────────────────────

HEADERS_COMMON = {
    "User-Agent":        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "Accept-Language":   "en-US,en;q=0.9",
    "Accept-Encoding":   "gzip, deflate, br"
}

def exists_and_ok(cpr):
    path = os.path.join(OUTPUT_DIR, f"{cpr}.json")
    if not os.path.isfile(path):
        return False
    try:
        data = json.load(open(path, 'r', encoding='utf-8'))
        return data.get("fejlkode") != "COOLDOWN"
    except Exception:
        return False

def do_login(session):
    """
    1) GET the OpenID‑Connect URL, following redirects to the real login page
    2) Scrape ALL hidden <input> fields
    3) POST back username/password + those hidden fields
    4) Return the fresh JSESSIONID
    """
    # 1) GET with redirects to land on login form
    r1 = session.get(LOGIN_GET, headers=HEADERS_COMMON, allow_redirects=True, timeout=10)
    if r1.status_code != 200:
        raise RuntimeError(f"Login GET failed: HTTP {r1.status_code}")

    # 2) Parse hidden inputs
    soup = BeautifulSoup(r1.text, 'html.parser')
    form = soup.find('form', attrs={'action': True})
    if not form:
        raise RuntimeError("Login form not found on redirected page")

    payload = {}
    for inp in form.find_all('input', {'type': 'hidden'}):
        name = inp.get('name')
        val  = inp.get('value', '')
        if name:
            payload[name] = val

    # 3) Inject credentials
    payload['username'] = USERNAME
    payload['password'] = PASSWORD
    payload.setdefault('login', '')

    # Build absolute POST URL
    action = form['action']
    post_url = action if action.startswith('http') else LOGIN_POST_BASE + action

    # 4) POST credentials + hidden fields
    r2 = session.post(
        post_url,
        headers={**HEADERS_COMMON, "Content-Type": "application/x-www-form-urlencoded"},
        data=payload,
        allow_redirects=False,
        timeout=10
    )
    if r2.status_code not in (200, 302):
        raise RuntimeError(f"Login POST failed: HTTP {r2.status_code}")

    jsess = session.cookies.get("JSESSIONID")
    if not jsess:
        raise RuntimeError("No JSESSIONID set after login POST")

    return jsess

if __name__ == "__main__":
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    with open(CPR_FILE, 'r', encoding='utf-8') as f:
        cpr_list = [l.strip() for l in f if l.strip()]

    for cpr in cpr_list:
        if exists_and_ok(cpr):
            print(f"[{cpr}] → already done, skipping.")
            continue

        path = os.path.join(OUTPUT_DIR, f"{cpr}.json")
        if os.path.isfile(path):
            print(f"[{cpr}] → removing stale COOLDOWN file.")
            os.remove(path)

        session = requests.Session()

        # LOGIN
        try:
            jsess = do_login(session)
            print(f"[{cpr}] → logged in, JSESSIONID={jsess}")
        except Exception as e:
            print(f"[{cpr}] LOGIN ERROR: {e}")
            continue

        # FIRST data GET
        ts   = int(time.time() * 1000)
        resp = session.get(
            DATA_URL,
            params={'cprnummer': cpr, '_': ts},
            headers={**HEADERS_COMMON,
                     "X-Requested-With": "XMLHttpRequest",
                     "Accept": "application/json"},
            timeout=10
        )
        if resp.status_code != 200:
            print(f"[{cpr}] DATA HTTP ERROR: {resp.status_code}")
            continue
        data = resp.json()

        # RETRY if COOLDOWN
        if data.get("fejlkode") == "COOLDOWN":
            print(f"[{cpr}] → got COOLDOWN; retrying login & fetch once.")
            os.remove(path)
            try:
                jsess = do_login(session)
                print(f"[{cpr}] → re‑logged in, JSESSIONID={jsess}")
            except Exception as e:
                print(f"[{cpr}] RETRY LOGIN ERROR: {e}")
                continue

            ts   = int(time.time() * 1000)
            resp = session.get(
                DATA_URL,
                params={'cprnummer': cpr, '_': ts},
                headers={**HEADERS_COMMON,
                         "X-Requested-With": "XMLHttpRequest",
                         "Accept": "application/json"},
                timeout=10
            )
            if resp.status_code != 200:
                print(f"[{cpr}] RETRY DATA HTTP ERROR: {resp.status_code}")
                continue
            data = resp.json()

        # SAVE final JSON
        with open(path, 'w', encoding='utf-8') as out:
            json.dump(data, out, ensure_ascii=False, indent=2)
        size = len(json.dumps(data, ensure_ascii=False))
        print(f"[{cpr}] → saved ({size} bytes)\n")

    print("All done.")

