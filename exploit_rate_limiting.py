import os
import time
import json
import requests

# ─── Configuration ─────────────────────────────────────────────────────────────
CPR_FILE   = 'numbers_clean.txt'
OUTPUT_DIR = 'responses'
DATA_URL = 'https://app.danlon.dk/app/rest/cpropslag'
LOGIN_URL = "https://app.danlon.dk/app/oauth2/login?returnURL=/app/medarbejder/generelt/NY?u%3D1752663549968"
# ────────────────────────────────────────────────────────────────────────────────

HEADERS_LOGIN = {
    "Accept-Language": "en-US,en;q=0.9",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36",
    "Accept": "text/html,Rapplication/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-User": "?1",
    "Sec-Fetch-Dest": "document",
    "Sec-Ch-Ua": '"Not?A_Brand";v="99", "Chromium";v="130"',
    "Sec-Ch-Ua-Mobile": "?0",
    "Sec-Ch-Ua-Platform": '"Linux"',
    "Accept-Encoding": "gzip, deflate, br",
    "Priority": "u=0, i"
}

HEADERS_DATA = {
    "Sec-Ch-Ua-Platform": '"Linux"',
    "X-Requested-With": "XMLHttpRequest",
    "Accept-Language": "en-US,en;q=0.9",
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Sec-Ch-Ua": '"Not?A_Brand";v="99", "Chromium";v="130"',
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.70 Safari/537.36",
    "Sec-Ch-Ua-Mobile": "?0",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty",
    "Referer": "https://app.danlon.dk/app/medarbejder/generelt/NY?u=1752663882046",
    "Accept-Encoding": "gzip, deflate, br",
    "Priority": "u=1, i"
}

def is_cooldown(file_path):
    if not os.path.isfile(file_path):
        return False
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data.get("fejlkode") == "COOLDOWN"
    except (json.JSONDecodeError, IOError):
        return False

if __name__ == "__main__":
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    with open(CPR_FILE, 'r', encoding='utf-8') as f:
        cpr_list = [l.strip() for l in f if l.strip()]

    session = requests.Session()
    print("Requesting JSESSIONID...")
    session.get(LOGIN_URL, headers=HEADERS_LOGIN, allow_redirects=False)
    jsessionid = session.cookies.get("JSESSIONID")
    if not jsessionid:
        print("Failed to get JSESSIONID. Exiting.")
        exit()
    print(f"Got JSESSIONID: {jsessionid}")


    for cpr in cpr_list:
        path = os.path.join(OUTPUT_DIR, f"{cpr}.json")

        if os.path.isfile(path):
            if is_cooldown(path):
                os.remove(path)
                print(f"[{cpr}] → removed COOLDOWN file.")
            else:
                print(f"[{cpr}] → already done, skipping.")
                continue

        # DATA GET
        ts   = int(time.time() * 1000)
        url = f"{DATA_URL}?cprnummer={cpr}&_={ts}"
        try:
            resp = session.get(url, headers=HEADERS_DATA)
            resp.raise_for_status()
            data = resp.json()
        except requests.exceptions.RequestException as e:
            print(f"[{cpr}] DATA HTTP ERROR: {e}")
            continue
        except json.JSONDecodeError:
            print(f"[{cpr}] DATA JSON DECODE ERROR: {resp.text}")
            continue

        # SAVE if not COOLDOWN
        if data.get("fejlkode") != "COOLDOWN":
            with open(path, 'w', encoding='utf-8') as out:
                json.dump(data, out, ensure_ascii=False, indent=2)
            size = len(json.dumps(data, ensure_ascii=False))
            print(f"[{cpr}] → saved ({size} bytes)\n")
        else:
            print(f"[{cpr}] → got COOLDOWN.")
            if os.path.isfile(path):
                os.remove(path)

    print("All done.")
